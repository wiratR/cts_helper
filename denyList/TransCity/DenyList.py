# automatically generated by the FlatBuffers compiler, do not modify

# namespace: TransCity

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DenyList(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DenyList()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDenyList(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DenyListBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x4E\x59\x53", size_prefixed=size_prefixed)

    # DenyList
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DenyList
    def DenyListEntries(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from TransCity.DenyListEntry import DenyListEntry
            obj = DenyListEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DenyList
    def DenyListEntriesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DenyList
    def DenyListEntriesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # DenyList
    def DenyReasons(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from TransCity.DenyReason import DenyReason
            obj = DenyReason()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DenyList
    def DenyReasonsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DenyList
    def DenyReasonsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def DenyListStart(builder):
    builder.StartObject(2)

def Start(builder):
    DenyListStart(builder)

def DenyListAddDenyListEntries(builder, denyListEntries):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(denyListEntries), 0)

def AddDenyListEntries(builder, denyListEntries):
    DenyListAddDenyListEntries(builder, denyListEntries)

def DenyListStartDenyListEntriesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDenyListEntriesVector(builder, numElems):
    return DenyListStartDenyListEntriesVector(builder, numElems)

def DenyListAddDenyReasons(builder, denyReasons):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(denyReasons), 0)

def AddDenyReasons(builder, denyReasons):
    DenyListAddDenyReasons(builder, denyReasons)

def DenyListStartDenyReasonsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDenyReasonsVector(builder, numElems):
    return DenyListStartDenyReasonsVector(builder, numElems)

def DenyListEnd(builder):
    return builder.EndObject()

def End(builder):
    return DenyListEnd(builder)
