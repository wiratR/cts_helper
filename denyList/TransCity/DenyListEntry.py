# automatically generated by the FlatBuffers compiler, do not modify

# namespace: TransCity

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DenyListEntry(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DenyListEntry()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDenyListEntry(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DenyListEntryBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x4E\x59\x53", size_prefixed=size_prefixed)

    # DenyListEntry
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DenyListEntry
    def SurrogatePan(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DenyListEntry
    def DenyReasonsId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # DenyListEntry
    def DenyReasonsIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # DenyListEntry
    def DenyReasonsIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DenyListEntry
    def DenyReasonsIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # DenyListEntry
    def Removed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def DenyListEntryStart(builder):
    builder.StartObject(3)

def Start(builder):
    DenyListEntryStart(builder)

def DenyListEntryAddSurrogatePan(builder, surrogatePan):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(surrogatePan), 0)

def AddSurrogatePan(builder, surrogatePan):
    DenyListEntryAddSurrogatePan(builder, surrogatePan)

def DenyListEntryAddDenyReasonsId(builder, denyReasonsId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(denyReasonsId), 0)

def AddDenyReasonsId(builder, denyReasonsId):
    DenyListEntryAddDenyReasonsId(builder, denyReasonsId)

def DenyListEntryStartDenyReasonsIdVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartDenyReasonsIdVector(builder, numElems):
    return DenyListEntryStartDenyReasonsIdVector(builder, numElems)

def DenyListEntryAddRemoved(builder, removed):
    builder.PrependBoolSlot(2, removed, 0)

def AddRemoved(builder, removed):
    DenyListEntryAddRemoved(builder, removed)

def DenyListEntryEnd(builder):
    return builder.EndObject()

def End(builder):
    return DenyListEntryEnd(builder)
